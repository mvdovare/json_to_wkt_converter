# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:\pycharm\designer test\convert to wkt_test_1.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import json
from shapely.geometry import shape

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1078, 798)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(20, 410, 1041, 201))
        self.listWidget.setObjectName("listWidget")
        self.addbutton = QtWidgets.QPushButton(self.centralwidget)
        self.addbutton.setGeometry(QtCore.QRect(20, 290, 301, 81))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.addbutton.setFont(font)
        self.addbutton.setObjectName("addbutton")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(20, 50, 1041, 191))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.lineEdit.setFont(font)
        self.lineEdit.setInputMask("")
        self.lineEdit.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.lineEdit.setObjectName("lineEdit")
        self.addbutton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.addbutton_2.setGeometry(QtCore.QRect(10, 650, 301, 81))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.addbutton_2.setFont(font)
        self.addbutton_2.setObjectName("addbutton_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1078, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.addbutton.clicked.connect(self.convertItem)
        self.addbutton_2.clicked.connect(self.saveItem)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.addbutton.setText(_translate("MainWindow", "Convert to wkt"))
        self.addbutton_2.setText(_translate("MainWindow", "Save wkt file"))

    def setImage(self):
        fileName, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Select Image", "",
                                                            "Image Files (*.png *.jpg *jpeg *.bmp)")  # Ask for file
        if fileName:  # If the user gives a file
            pixmap = QtGui.QPixmap(fileName)  # Setup pixmap with the provided image
            pixmap = pixmap.scaled(self.imageLbl.width(), self.imageLbl.height(),
                                   QtCore.Qt.KeepAspectRatio)  # Scale pixmap
            self.imageLbl.setPixmap(pixmap)  # Set the pixmap onto the label
            self.imageLbl.setAlignment(QtCore.Qt.AlignCenter)  # Align the label to center

    def saveItem(self):
        value = self.lineEdit.text()
        data_from_json = json.loads(value)

        if "geo_shape" in data_from_json:
            required_field = {
                "coordinates": data_from_json["geo_shape"]["best.geo"]["shape"]["coordinates"],
                "type": data_from_json["geo_shape"]["best.geo"]["shape"]["type"]
            }
        else:
            required_field = data_from_json

        geom = shape(required_field)
        WKT_geo = geom.wkt

        fileName, _ = QtWidgets.QFileDialog.getSaveFileName(None, 'Save File', "", "Output Files (*.wkt)")
        file = open(fileName, 'w')
        file.write(WKT_geo)
        file.close()

    def convertItem(self):
        value = self.lineEdit.text()  # Get the value of the lineEdit
        # self.lineEdit.clear()  # Clear the text
        data_from_json = json.loads(value)

        if "geo_shape" in data_from_json:
            required_field = {
                "coordinates": data_from_json["geo_shape"]["best.geo"]["shape"]["coordinates"],
                "type": data_from_json["geo_shape"]["best.geo"]["shape"]["type"]
            }
        else:
            required_field = data_from_json

        geom = shape(required_field)
        wkt_geo = geom.wkt

        self.listWidget.addItem(wkt_geo)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
